import 'dart:async';import 'package:crafty_bay_ecommerce/api/base_url.dart';import 'package:crafty_bay_ecommerce/api/category/category_list.dart';import 'package:crafty_bay_ecommerce/api/products/cart_list.dart';import 'package:crafty_bay_ecommerce/api/products/delete_cart_list.dart';import 'package:crafty_bay_ecommerce/api/products/list_porduct_slider.dart';import 'package:crafty_bay_ecommerce/api/products/list_product_by_brand.dart';import 'package:crafty_bay_ecommerce/api/products/list_product_by_remark.dart';import 'package:crafty_bay_ecommerce/api/user/read_profile.dart';import 'package:crafty_bay_ecommerce/model/category%20list%20model/category_list_model.dart';import 'package:crafty_bay_ecommerce/model/products%20model/cart_list_model.dart';import 'package:crafty_bay_ecommerce/model/products%20model/list_product_by_brand_model.dart';import 'package:crafty_bay_ecommerce/model/products%20model/list_product_by_category_model.dart';import 'package:crafty_bay_ecommerce/model/products%20model/list_product_by_remark_model.dart';import 'package:crafty_bay_ecommerce/model/products%20model/list_product_slider_model.dart';import 'package:crafty_bay_ecommerce/model/user%20model/read_profile.dart';import 'package:crafty_bay_ecommerce/theme/app_colors.dart';import 'package:crafty_bay_ecommerce/utils/export.dart';import 'package:crafty_bay_ecommerce/utils/storage_key.dart';import 'package:crafty_bay_ecommerce/utils/store_data_value.dart';import '../../../../api/products/list_product_by_category.dart';import '../../../../utils/snackbar.dart';class HomeScreenController extends GetxController {  List<CategoryListModel> categoryList = [];  List<ListProductSliderModel> listProductSlider = [];  List<ListProductByBrandModel> listProductByBrand = [];  List<ListProductByCategoryModel> listProductByCategory = [];  List<ListProductByRemarkModel> listProductByRemarkPopular = [];  List<ListProductByRemarkModel> listProductByRemarkSpecial = [];  List<ListProductByRemarkModel> listProductByRemarkNew = [];  List<ReadProfileModel> readProfile = [];  List<CartListModel> cartList = [];  bool _isLoading = true;  bool get isLoading => _isLoading;  final TextEditingController searchController = TextEditingController();  // Category list method  Future<void> fetchAndParseCategoryList() async {    try {      List<Map<String, dynamic>> response = await fetchCategoryListRequest();      categoryList.clear(); // Clear the existing data before adding new data      categoryList.addAll(        response.map(          (json) => CategoryListModel.fromJson(json),        ),      );    } catch (e) {      SnackToast.requestFailed();    }  }  // listProductSlider method  Future<void> fetchAndParseListProductSlider() async {    try {      List<Map<String, dynamic>> response =          await fetchListProductSliderRequest();      listProductSlider.clear();      listProductSlider.addAll(          response.map((json) => ListProductSliderModel.fromJson(json)));    } catch (e) {      SnackToast.requestFailed();    }  }  // List Product by brand method  Future<void> fetchAndParseListProductByBrand() async {    List<Map<String, dynamic>> response =        await fetchListProductByBrandRequest();    listProductByBrand.clear();    listProductByBrand.addAll(      response.map(        (json) => ListProductByBrandModel.fromJson(json),      ),    );  }  Future<void> fetchAndParseListProductByCategory() async {    List<Map<String, dynamic>> response =        await fetchListProductByCategoryRequest();    listProductByCategory.clear();    listProductByCategory.addAll(        response.map((json) => ListProductByCategoryModel.fromJson(json)));  }  // listProductByRemarkNewUrl  Future<void> fetchAndParseListProductByRemarkPopular() async {    List<Map<String, dynamic>> response =        await fetchListProductByRemarkRequest(listProductByRemarkPopularUrl);    listProductByRemarkPopular.clear();    listProductByRemarkPopular.addAll(      response.map(        (json) => ListProductByRemarkModel.fromJson(json),      ),    );  }  // listProductByRemarkSpecialUrl  Future<void> fetchAndParseListProductByRemarkSpecial() async {    List<Map<String, dynamic>> response =        await fetchListProductByRemarkRequest(listProductByRemarkSpecialUrl);    listProductByRemarkSpecial.clear();    listProductByRemarkSpecial.addAll(      response.map(        (json) => ListProductByRemarkModel.fromJson(json),      ),    );  }  // listProductByRemarkNewUrl  Future<void> fetchAndParseListProductByRemark() async {    List<Map<String, dynamic>> response =        await fetchListProductByRemarkRequest(listProductByRemarkNewUrl);    listProductByRemarkNew.clear();    listProductByRemarkNew.addAll(      response.map(        (json) => ListProductByRemarkModel.fromJson(json),      ),    );  }//Cart List method  Future<void> fetchAndParseCartList() async {    List<Map<String, dynamic>> response = await fetchCartListRequest();    cartList.clear();    cartList.addAll(response.map((json) => CartListModel.fromJson(json)));  }//Read profile  Future<void> fetchAndParseReadProfile() async {    List<Map<String, dynamic>> response = await readProfileRequest();    readProfile.clear();    readProfile.addAll(      response.map(        (json) => ReadProfileModel.fromJson(json),      ),    );  }  // Initialize all data fetch method  Future<void> initializeMethod() async {    _isLoading = true;    update();    try {      await Future.wait([        fetchAndParseCategoryList(),        fetchAndParseListProductSlider(),        fetchAndParseListProductByBrand(),        fetchAndParseListProductByCategory(),        fetchAndParseListProductByRemarkPopular(),        fetchAndParseListProductByRemarkSpecial(),        fetchAndParseListProductByRemark(),      ]);    } catch (e) {      // Handle errors, e.g., show a snack-bar or an error message      throw Exception('Error fetching data :$e');    } finally {      fetchUserData();      _isLoading = false;      update();    }  }  int carouselCurrentIndex = 0;  void carouselSelectedIndex(index) {    carouselCurrentIndex = index;    update();  }  void fetchUserData() {    final tokenData = storageInstance.read(StorageKey.setTokenKey);    final emailData = storageInstance.read(StorageKey.setEmailKey);    if (tokenData != null && emailData != null) {      UserData.userToken = tokenData;      UserData.userEmail = emailData;      fetchAndParseCartList();      fetchAndParseReadProfile();    }  }  void isCheckLoggedIn() {    if (UserData.userToken.isEmpty) {      Get.toNamed(RouteName.emailVerifyScreen);    } else {      Get.defaultDialog(          title: 'Oh!',          content: const Text('Wait some times.Its a Technical problem'),          barrierDismissible: false,          onCancel: () {});    }  }  Future<void> deleteItems(id) async {    final response = await postDeleteCartList(id);    if (response['msg'] == 'success') {      fetchAndParseCartList();      SnackToast.cartOperationSuccessful();    } else {      SnackToast.cartOperationFailed();    }  }  @override  void onInit() {    initializeMethod();    super.onInit();  }}